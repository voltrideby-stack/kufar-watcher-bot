#!/usr/bin/env python3
"""
Kufar Telegram Bot ‚Äî –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ kufar.by
–ö–æ–º–∞–Ω–¥—ã:
/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
/add <url> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
/remove <–Ω–æ–º–µ—Ä> ‚Äî —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ –Ω–æ–º–µ—Ä—É
"""

import os
import re
import time
import sqlite3
import requests
import random
import logging
from urllib.parse import urljoin
from bs4 import BeautifulSoup
from telegram.ext import Updater, CommandHandler, CallbackContext
from telegram import Update

# --- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram ---
TELEGRAM_BOT_TOKEN = "8342529464:AAGw9ngsU0SD-W1keIHdv_eQiN3wutAK58U"   # —Ç–æ–∫–µ–Ω –æ—Ç BotFather
TELEGRAM_CHAT_ID   = 584233853                  # —Ç–≤–æ–π chat_id

# --- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã ---
DB_PATH = "kufar_bot.db"
CHECK_INTERVAL = 60  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# --- –ë–ê–ó–ê –î–ê–ù–ù–´–• ---
def init_db():
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    conn.execute("CREATE TABLE IF NOT EXISTS links (id INTEGER PRIMARY KEY AUTOINCREMENT, url TEXT)")
    conn.execute("CREATE TABLE IF NOT EXISTS seen_ads (id TEXT PRIMARY KEY, url TEXT, first_seen_ts INTEGER)")
    conn.commit()
    return conn

# --- –ü–ê–†–°–ò–ù–ì ---
def ad_id_from_url(href: str):
    m = re.search(r"/vi/(\\d+)", href)
    return m.group(1) if m else None

def parse_ads(html: str, base_url: str):
    soup = BeautifulSoup(html, "lxml")
    anchors = soup.select('a[href*="/vi/"]')
    ads = []
    seen = set()
    for a in anchors:
        href = a.get("href")
        if not href:
            continue
        full = urljoin(base_url, href)
        adid = ad_id_from_url(full)
        if not adid or adid in seen:
            continue
        seen.add(adid)
        title = a.get("title") or a.get_text(" ", strip=True)
        ads.append({"id": adid, "title": title, "url": full})
    return ads

def fetch(url: str):
    r = requests.get(url, timeout=20)
    r.raise_for_status()
    return r.text

def send_to_telegram(text: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    requests.post(url, json={"chat_id": TELEGRAM_CHAT_ID, "text": text}, timeout=20)

# --- –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ---
def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –ö—É—Ñ–∞—Ä üöÄ\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add <url> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–æ–∏—Å–∫–∏\n"
        "/remove <–Ω–æ–º–µ—Ä> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–∏—Å–∫"
    )

def add_url(update: Update, context: CallbackContext):
    if not context.args:
        update.message.reply_text("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü—Ä–∏–º–µ—Ä: /add https://kufar.by/l/minsk/...")
        return
    url = context.args[0]
    conn.execute("INSERT INTO links(url) VALUES (?)", (url,))
    conn.commit()
    update.message.reply_text(f"‚úÖ –°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {url}")

def list_urls(update: Update, context: CallbackContext):
    cur = conn.execute("SELECT id, url FROM links ORDER BY id")
    rows = cur.fetchall()
    if not rows:
        update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return
    text = "\n".join([f"{row[0]}. {row[1]}" for row in rows])
    update.message.reply_text(f"–¢–µ–∫—É—â–∏–µ –ø–æ–∏—Å–∫–∏:\n{text}")

def remove_url(update: Update, context: CallbackContext):
    if not context.args:
        update.message.reply_text("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –ø–æ–∏—Å–∫–∞. –ü—Ä–∏–º–µ—Ä: /remove 1")
        return
    try:
        idx = int(context.args[0])
        conn.execute("DELETE FROM links WHERE id=?", (idx,))
        conn.commit()
        update.message.reply_text(f"üóë –ü–æ–∏—Å–∫ {idx} —É–¥–∞–ª—ë–Ω")
    except:
        update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä.")

# --- –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ ---
def check_ads():
    cur = conn.execute("SELECT url FROM links")
    urls = [row[0] for row in cur.fetchall()]
    for url in urls:
        logging.info("–ü—Ä–æ–≤–µ—Ä—è—é %s", url)
        try:
            html = fetch(url)
        except Exception as e:
            logging.warning("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: %s", e)
            continue
        ads = parse_ads(html, url)
        for ad in ads:
            cur = conn.execute("SELECT 1 FROM seen_ads WHERE id=?", (ad["id"],))
            if cur.fetchone():
                continue
            conn.execute("INSERT INTO seen_ads (id, url, first_seen_ts) VALUES (?, ?, ?)",
                         (ad["id"], ad["url"], int(time.time())))
            conn.commit()
            send_to_telegram(f"{ad['title']}\n{ad['url']}")
            time.sleep(random.uniform(0.5, 1.5))

def run_checker():
    while True:
        check_ads()
        logging.info("–ü–∞—É–∑–∞ %s —Å–µ–∫", CHECK_INTERVAL)
        time.sleep(CHECK_INTERVAL)

# --- MAIN ---
if __name__ == "__main__":
    conn = init_db()

    updater = Updater(TELEGRAM_BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("add", add_url))
    dp.add_handler(CommandHandler("list", list_urls))
    dp.add_handler(CommandHandler("remove", remove_url))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    import threading
    threading.Thread(target=run_checker, daemon=True).start()

    updater.start_polling()
    updater.idle()

